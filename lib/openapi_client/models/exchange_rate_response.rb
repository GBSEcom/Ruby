=begin
#Payment Gateway API Specification.

#Payment Gateway API for payment processing. Version 6.4.0.20181018.001 

OpenAPI spec version: 6.4.0.20181018.001

Generated by: https://openapi-generator.tech
OpenAPI Generator version: unset

=end

require 'date'

module OpenapiClient
  # Exchange rate response
  class ExchangeRateResponse
    # Echoes back the value in the request header
    attr_accessor :client_request_id

    # Echoes back the value in the request header
    attr_accessor :api_trace_id

    attr_accessor :response_type

    # The response transaction ID
    attr_accessor :ipg_transaction_id

    # Time of the request
    attr_accessor :request_time

    # Inquiry rate ID.
    attr_accessor :inquiry_rate_id

    # Foreign currency code
    attr_accessor :foreign_currency_code

    # Foreign amount
    attr_accessor :foreign_amount

    # Exchange rate
    attr_accessor :exchange_rate

    # Dcc offered.
    attr_accessor :dcc_offered

    # Exchange rate source timestamp
    attr_accessor :exchange_rate_source_timestamp

    # Expiration timestamp
    attr_accessor :expiration_timestamp

    # Margin rate percentage.
    attr_accessor :margin_rate_percentage

    # Exchange rate source name
    attr_accessor :exchange_rate_source_name

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'client_request_id' => :'clientRequestId',
        :'api_trace_id' => :'apiTraceId',
        :'response_type' => :'responseType',
        :'ipg_transaction_id' => :'ipgTransactionId',
        :'request_time' => :'requestTime',
        :'inquiry_rate_id' => :'inquiryRateId',
        :'foreign_currency_code' => :'foreignCurrencyCode',
        :'foreign_amount' => :'foreignAmount',
        :'exchange_rate' => :'exchangeRate',
        :'dcc_offered' => :'dccOffered',
        :'exchange_rate_source_timestamp' => :'exchangeRateSourceTimestamp',
        :'expiration_timestamp' => :'expirationTimestamp',
        :'margin_rate_percentage' => :'marginRatePercentage',
        :'exchange_rate_source_name' => :'exchangeRateSourceName'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'client_request_id' => :'String',
        :'api_trace_id' => :'String',
        :'response_type' => :'ResponseType',
        :'ipg_transaction_id' => :'String',
        :'request_time' => :'String',
        :'inquiry_rate_id' => :'String',
        :'foreign_currency_code' => :'String',
        :'foreign_amount' => :'String',
        :'exchange_rate' => :'String',
        :'dcc_offered' => :'String',
        :'exchange_rate_source_timestamp' => :'String',
        :'expiration_timestamp' => :'String',
        :'margin_rate_percentage' => :'String',
        :'exchange_rate_source_name' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'clientRequestId')
        self.client_request_id = attributes[:'clientRequestId']
      end

      if attributes.has_key?(:'apiTraceId')
        self.api_trace_id = attributes[:'apiTraceId']
      end

      if attributes.has_key?(:'responseType')
        self.response_type = attributes[:'responseType']
      end

      if attributes.has_key?(:'ipgTransactionId')
        self.ipg_transaction_id = attributes[:'ipgTransactionId']
      end

      if attributes.has_key?(:'requestTime')
        self.request_time = attributes[:'requestTime']
      end

      if attributes.has_key?(:'inquiryRateId')
        self.inquiry_rate_id = attributes[:'inquiryRateId']
      end

      if attributes.has_key?(:'foreignCurrencyCode')
        self.foreign_currency_code = attributes[:'foreignCurrencyCode']
      end

      if attributes.has_key?(:'foreignAmount')
        self.foreign_amount = attributes[:'foreignAmount']
      end

      if attributes.has_key?(:'exchangeRate')
        self.exchange_rate = attributes[:'exchangeRate']
      end

      if attributes.has_key?(:'dccOffered')
        self.dcc_offered = attributes[:'dccOffered']
      end

      if attributes.has_key?(:'exchangeRateSourceTimestamp')
        self.exchange_rate_source_timestamp = attributes[:'exchangeRateSourceTimestamp']
      end

      if attributes.has_key?(:'expirationTimestamp')
        self.expiration_timestamp = attributes[:'expirationTimestamp']
      end

      if attributes.has_key?(:'marginRatePercentage')
        self.margin_rate_percentage = attributes[:'marginRatePercentage']
      end

      if attributes.has_key?(:'exchangeRateSourceName')
        self.exchange_rate_source_name = attributes[:'exchangeRateSourceName']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @response_type.nil?
        invalid_properties.push('invalid value for "response_type", response_type cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @response_type.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          client_request_id == o.client_request_id &&
          api_trace_id == o.api_trace_id &&
          response_type == o.response_type &&
          ipg_transaction_id == o.ipg_transaction_id &&
          request_time == o.request_time &&
          inquiry_rate_id == o.inquiry_rate_id &&
          foreign_currency_code == o.foreign_currency_code &&
          foreign_amount == o.foreign_amount &&
          exchange_rate == o.exchange_rate &&
          dcc_offered == o.dcc_offered &&
          exchange_rate_source_timestamp == o.exchange_rate_source_timestamp &&
          expiration_timestamp == o.expiration_timestamp &&
          margin_rate_percentage == o.margin_rate_percentage &&
          exchange_rate_source_name == o.exchange_rate_source_name
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [client_request_id, api_trace_id, response_type, ipg_transaction_id, request_time, inquiry_rate_id, foreign_currency_code, foreign_amount, exchange_rate, dcc_offered, exchange_rate_source_timestamp, expiration_timestamp, margin_rate_percentage, exchange_rate_source_name].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = OpenapiClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
