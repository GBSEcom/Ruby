=begin
#Payment Gateway API Specification.

#Payment Gateway API for payment processing. Version 6.4.0.20181018.001 

OpenAPI spec version: 6.4.0.20181018.001

Generated by: https://openapi-generator.tech
OpenAPI Generator version: unset

=end

require 'date'

module OpenapiClient
  # Payment card model
  class PaymentCard
    # Payment card number
    attr_accessor :number

    attr_accessor :expiry_date

    # Card Verification Value/Number
    attr_accessor :security_code

    attr_accessor :payment_tokenization

    # Card function. Optional, valid values are CREDIT or DEBIT.
    attr_accessor :card_function

    # Name of the cardholder on the card
    attr_accessor :cardholder_name

    attr_accessor :authentication_request

    attr_accessor :authentication_result

    # The payment card BIN
    attr_accessor :bin

    # The last 4 payment card numbers
    attr_accessor :last4

    # Optional, required only if using dual branded card
    attr_accessor :brand

    # The issuing country
    attr_accessor :issuing_country

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'number' => :'number',
        :'expiry_date' => :'expiryDate',
        :'security_code' => :'securityCode',
        :'payment_tokenization' => :'paymentTokenization',
        :'card_function' => :'cardFunction',
        :'cardholder_name' => :'cardholderName',
        :'authentication_request' => :'authenticationRequest',
        :'authentication_result' => :'authenticationResult',
        :'bin' => :'bin',
        :'last4' => :'last4',
        :'brand' => :'brand',
        :'issuing_country' => :'issuingCountry'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'number' => :'String',
        :'expiry_date' => :'Expiration',
        :'security_code' => :'String',
        :'payment_tokenization' => :'PaymentTokenization',
        :'card_function' => :'String',
        :'cardholder_name' => :'String',
        :'authentication_request' => :'AuthenticationRequest',
        :'authentication_result' => :'PaymentCardAuthenticationResult',
        :'bin' => :'String',
        :'last4' => :'String',
        :'brand' => :'String',
        :'issuing_country' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'number')
        self.number = attributes[:'number']
      end

      if attributes.has_key?(:'expiryDate')
        self.expiry_date = attributes[:'expiryDate']
      end

      if attributes.has_key?(:'securityCode')
        self.security_code = attributes[:'securityCode']
      end

      if attributes.has_key?(:'paymentTokenization')
        self.payment_tokenization = attributes[:'paymentTokenization']
      end

      if attributes.has_key?(:'cardFunction')
        self.card_function = attributes[:'cardFunction']
      end

      if attributes.has_key?(:'cardholderName')
        self.cardholder_name = attributes[:'cardholderName']
      end

      if attributes.has_key?(:'authenticationRequest')
        self.authentication_request = attributes[:'authenticationRequest']
      end

      if attributes.has_key?(:'authenticationResult')
        self.authentication_result = attributes[:'authenticationResult']
      end

      if attributes.has_key?(:'bin')
        self.bin = attributes[:'bin']
      end

      if attributes.has_key?(:'last4')
        self.last4 = attributes[:'last4']
      end

      if attributes.has_key?(:'brand')
        self.brand = attributes[:'brand']
      end

      if attributes.has_key?(:'issuingCountry')
        self.issuing_country = attributes[:'issuingCountry']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if !@number.nil? && @number.to_s.length > 19
        invalid_properties.push('invalid value for "number", the character length must be smaller than or equal to 19.')
      end

      if !@number.nil? && @number.to_s.length < 13
        invalid_properties.push('invalid value for "number", the character length must be great than or equal to 13.')
      end

      if !@number.nil? && @number !~ Regexp.new(/[0-9]{13,19}/)
        invalid_properties.push('invalid value for "number", must conform to the pattern /[0-9]{13,19}/.')
      end

      if !@security_code.nil? && @security_code.to_s.length > 4
        invalid_properties.push('invalid value for "security_code", the character length must be smaller than or equal to 4.')
      end

      if !@security_code.nil? && @security_code.to_s.length < 3
        invalid_properties.push('invalid value for "security_code", the character length must be great than or equal to 3.')
      end

      if !@cardholder_name.nil? && @cardholder_name.to_s.length > 96
        invalid_properties.push('invalid value for "cardholder_name", the character length must be smaller than or equal to 96.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@number.nil? && @number.to_s.length > 19
      return false if !@number.nil? && @number.to_s.length < 13
      return false if !@number.nil? && @number !~ Regexp.new(/[0-9]{13,19}/)
      return false if !@security_code.nil? && @security_code.to_s.length > 4
      return false if !@security_code.nil? && @security_code.to_s.length < 3
      return false if !@cardholder_name.nil? && @cardholder_name.to_s.length > 96
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] number Value to be assigned
    def number=(number)
      if !number.nil? && number.to_s.length > 19
        fail ArgumentError, 'invalid value for "number", the character length must be smaller than or equal to 19.'
      end

      if !number.nil? && number.to_s.length < 13
        fail ArgumentError, 'invalid value for "number", the character length must be great than or equal to 13.'
      end

      if !number.nil? && number !~ Regexp.new(/[0-9]{13,19}/)
        fail ArgumentError, 'invalid value for "number", must conform to the pattern /[0-9]{13,19}/.'
      end

      @number = number
    end

    # Custom attribute writer method with validation
    # @param [Object] security_code Value to be assigned
    def security_code=(security_code)
      if !security_code.nil? && security_code.to_s.length > 4
        fail ArgumentError, 'invalid value for "security_code", the character length must be smaller than or equal to 4.'
      end

      if !security_code.nil? && security_code.to_s.length < 3
        fail ArgumentError, 'invalid value for "security_code", the character length must be great than or equal to 3.'
      end

      @security_code = security_code
    end

    # Custom attribute writer method with validation
    # @param [Object] cardholder_name Value to be assigned
    def cardholder_name=(cardholder_name)
      if !cardholder_name.nil? && cardholder_name.to_s.length > 96
        fail ArgumentError, 'invalid value for "cardholder_name", the character length must be smaller than or equal to 96.'
      end

      @cardholder_name = cardholder_name
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          number == o.number &&
          expiry_date == o.expiry_date &&
          security_code == o.security_code &&
          payment_tokenization == o.payment_tokenization &&
          card_function == o.card_function &&
          cardholder_name == o.cardholder_name &&
          authentication_request == o.authentication_request &&
          authentication_result == o.authentication_result &&
          bin == o.bin &&
          last4 == o.last4 &&
          brand == o.brand &&
          issuing_country == o.issuing_country
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [number, expiry_date, security_code, payment_tokenization, card_function, cardholder_name, authentication_request, authentication_result, bin, last4, brand, issuing_country].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = OpenapiClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
