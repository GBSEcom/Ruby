=begin
#Payment Gateway API Specification.

#The documentation here is designed to provide all of the technical guidance required to consume and integrate with our APIs for payment processing. To learn more about our APIs please visit https://docs.firstdata.com/org/gateway.

The version of the OpenAPI document: 6.14.0.20201015.001

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.1.1

=end

require 'date'

module OpenapiClient
  # Contains clearing related response information.
  class ClearingDetails
    # The array contains information about the clearing elements.
    attr_accessor :clearing_elements

    # Timestamp when the clearing has been processed. The used format is \"YYYYMMDDhhmmss\".
    attr_accessor :batch_time_stamp

    # Start receipt number for the clearing process.
    attr_accessor :receipt_number_from

    # End receipt number for the clearing process.
    attr_accessor :receipt_number_to

    # Trace number for the clearing process.
    attr_accessor :trace_number

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'clearing_elements' => :'clearingElements',
        :'batch_time_stamp' => :'batchTimeStamp',
        :'receipt_number_from' => :'receiptNumberFrom',
        :'receipt_number_to' => :'receiptNumberTo',
        :'trace_number' => :'traceNumber'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'clearing_elements' => :'Array<ClearingElement>',
        :'batch_time_stamp' => :'String',
        :'receipt_number_from' => :'Integer',
        :'receipt_number_to' => :'Integer',
        :'trace_number' => :'Integer'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OpenapiClient::ClearingDetails` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OpenapiClient::ClearingDetails`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'clearing_elements')
        if (value = attributes[:'clearing_elements']).is_a?(Array)
          self.clearing_elements = value
        end
      end

      if attributes.key?(:'batch_time_stamp')
        self.batch_time_stamp = attributes[:'batch_time_stamp']
      end

      if attributes.key?(:'receipt_number_from')
        self.receipt_number_from = attributes[:'receipt_number_from']
      end

      if attributes.key?(:'receipt_number_to')
        self.receipt_number_to = attributes[:'receipt_number_to']
      end

      if attributes.key?(:'trace_number')
        self.trace_number = attributes[:'trace_number']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      pattern = Regexp.new(/[0-9]{14}/)
      if !@batch_time_stamp.nil? && @batch_time_stamp !~ pattern
        invalid_properties.push("invalid value for \"batch_time_stamp\", must conform to the pattern #{pattern}.")
      end

      if !@receipt_number_from.nil? && @receipt_number_from > 9999
        invalid_properties.push('invalid value for "receipt_number_from", must be smaller than or equal to 9999.')
      end

      if !@receipt_number_from.nil? && @receipt_number_from < 1
        invalid_properties.push('invalid value for "receipt_number_from", must be greater than or equal to 1.')
      end

      if !@receipt_number_to.nil? && @receipt_number_to > 9999
        invalid_properties.push('invalid value for "receipt_number_to", must be smaller than or equal to 9999.')
      end

      if !@receipt_number_to.nil? && @receipt_number_to < 1
        invalid_properties.push('invalid value for "receipt_number_to", must be greater than or equal to 1.')
      end

      if !@trace_number.nil? && @trace_number > 999999
        invalid_properties.push('invalid value for "trace_number", must be smaller than or equal to 999999.')
      end

      if !@trace_number.nil? && @trace_number < 0
        invalid_properties.push('invalid value for "trace_number", must be greater than or equal to 0.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if !@batch_time_stamp.nil? && @batch_time_stamp !~ Regexp.new(/[0-9]{14}/)
      return false if !@receipt_number_from.nil? && @receipt_number_from > 9999
      return false if !@receipt_number_from.nil? && @receipt_number_from < 1
      return false if !@receipt_number_to.nil? && @receipt_number_to > 9999
      return false if !@receipt_number_to.nil? && @receipt_number_to < 1
      return false if !@trace_number.nil? && @trace_number > 999999
      return false if !@trace_number.nil? && @trace_number < 0
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] batch_time_stamp Value to be assigned
    def batch_time_stamp=(batch_time_stamp)
      pattern = Regexp.new(/[0-9]{14}/)
      if !batch_time_stamp.nil? && batch_time_stamp !~ pattern
        fail ArgumentError, "invalid value for \"batch_time_stamp\", must conform to the pattern #{pattern}."
      end

      @batch_time_stamp = batch_time_stamp
    end

    # Custom attribute writer method with validation
    # @param [Object] receipt_number_from Value to be assigned
    def receipt_number_from=(receipt_number_from)
      if !receipt_number_from.nil? && receipt_number_from > 9999
        fail ArgumentError, 'invalid value for "receipt_number_from", must be smaller than or equal to 9999.'
      end

      if !receipt_number_from.nil? && receipt_number_from < 1
        fail ArgumentError, 'invalid value for "receipt_number_from", must be greater than or equal to 1.'
      end

      @receipt_number_from = receipt_number_from
    end

    # Custom attribute writer method with validation
    # @param [Object] receipt_number_to Value to be assigned
    def receipt_number_to=(receipt_number_to)
      if !receipt_number_to.nil? && receipt_number_to > 9999
        fail ArgumentError, 'invalid value for "receipt_number_to", must be smaller than or equal to 9999.'
      end

      if !receipt_number_to.nil? && receipt_number_to < 1
        fail ArgumentError, 'invalid value for "receipt_number_to", must be greater than or equal to 1.'
      end

      @receipt_number_to = receipt_number_to
    end

    # Custom attribute writer method with validation
    # @param [Object] trace_number Value to be assigned
    def trace_number=(trace_number)
      if !trace_number.nil? && trace_number > 999999
        fail ArgumentError, 'invalid value for "trace_number", must be smaller than or equal to 999999.'
      end

      if !trace_number.nil? && trace_number < 0
        fail ArgumentError, 'invalid value for "trace_number", must be greater than or equal to 0.'
      end

      @trace_number = trace_number
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          clearing_elements == o.clearing_elements &&
          batch_time_stamp == o.batch_time_stamp &&
          receipt_number_from == o.receipt_number_from &&
          receipt_number_to == o.receipt_number_to &&
          trace_number == o.trace_number
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [clearing_elements, batch_time_stamp, receipt_number_from, receipt_number_to, trace_number].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes, attribute_map = self.class.attribute_map, openapi_types = self.class.openapi_types)
      return nil unless attributes.is_a?(Hash)
      openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        klass = OpenapiClient.const_get(type)
        if klass.respond_to?(:openapi_discriminator_name)
          klass = OpenapiClient.const_get(value[klass.attribute_map[klass.openapi_discriminator_name]])
        end
 
        klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash(attribute_map = self.class.attribute_map, openapi_nullable = Set.new([]))
      hash = {}
      attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end
        
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
