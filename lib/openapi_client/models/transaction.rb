=begin
#Payment Gateway API Specification.

#Payment Gateway API for payment processing. Version 6.4.0.20181018.001 

OpenAPI spec version: 6.4.0.20181018.001

Generated by: https://openapi-generator.tech
OpenAPI Generator version: unset

=end

require 'date'

module OpenapiClient
  # This is the common object for transaction
  class Transaction
    # The state of the transaction.
    attr_accessor :transaction_state

    # The transaction ID
    attr_accessor :ipg_transaction_id

    # Client order ID if supplied by client.
    attr_accessor :order_id

    attr_accessor :transaction_type

    attr_accessor :payment_method

    attr_accessor :amount

    # The submission component.
    attr_accessor :submission_component

    # The payer security level.
    attr_accessor :payer_security_level

    # The transaction time in seconds since Epoch
    attr_accessor :transaction_time

    # Store ID number.
    attr_accessor :store_id

    # The user ID.
    attr_accessor :user_id

    attr_accessor :processor

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'transaction_state' => :'transactionState',
        :'ipg_transaction_id' => :'ipgTransactionId',
        :'order_id' => :'orderId',
        :'transaction_type' => :'transactionType',
        :'payment_method' => :'paymentMethod',
        :'amount' => :'amount',
        :'submission_component' => :'submissionComponent',
        :'payer_security_level' => :'payerSecurityLevel',
        :'transaction_time' => :'transactionTime',
        :'store_id' => :'storeId',
        :'user_id' => :'userId',
        :'processor' => :'processor'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'transaction_state' => :'String',
        :'ipg_transaction_id' => :'String',
        :'order_id' => :'String',
        :'transaction_type' => :'TransactionType',
        :'payment_method' => :'PaymentMethod',
        :'amount' => :'Amount',
        :'submission_component' => :'String',
        :'payer_security_level' => :'String',
        :'transaction_time' => :'Integer',
        :'store_id' => :'String',
        :'user_id' => :'String',
        :'processor' => :'ProcessorData'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'transactionState')
        self.transaction_state = attributes[:'transactionState']
      end

      if attributes.has_key?(:'ipgTransactionId')
        self.ipg_transaction_id = attributes[:'ipgTransactionId']
      end

      if attributes.has_key?(:'orderId')
        self.order_id = attributes[:'orderId']
      end

      if attributes.has_key?(:'transactionType')
        self.transaction_type = attributes[:'transactionType']
      end

      if attributes.has_key?(:'paymentMethod')
        self.payment_method = attributes[:'paymentMethod']
      end

      if attributes.has_key?(:'amount')
        self.amount = attributes[:'amount']
      end

      if attributes.has_key?(:'submissionComponent')
        self.submission_component = attributes[:'submissionComponent']
      end

      if attributes.has_key?(:'payerSecurityLevel')
        self.payer_security_level = attributes[:'payerSecurityLevel']
      end

      if attributes.has_key?(:'transactionTime')
        self.transaction_time = attributes[:'transactionTime']
      end

      if attributes.has_key?(:'storeId')
        self.store_id = attributes[:'storeId']
      end

      if attributes.has_key?(:'userId')
        self.user_id = attributes[:'userId']
      end

      if attributes.has_key?(:'processor')
        self.processor = attributes[:'processor']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      transaction_state_validator = EnumAttributeValidator.new('String', ['AUTHORIZED', 'CAPTURED', 'COMPLETED_GET', 'DECLINED', 'CHECKED', 'INITIALIZED', 'PENDING_AUTHORIZATION', 'PENDING_AUTOVOID', 'PENDING_CAPTURE', 'PENDING_CREDIT', 'PENDING_GIROPAY_INIT', 'PENDING_IDEAL_INIT', 'PENDING_INIT', 'PENDING_READY', 'PENDING_RETURN', 'PENDING_SETTLEMENT', 'PENDING_SOFORT_INIT', 'PENDING_VOID', 'READY', 'SETTLED', 'VOIDED', 'WAITING', 'WAITING_AUTHENTICATION', 'WAITING_3D_SECURE', 'WAITING_CLICK_AND_BUY', 'WAITING_GIROPAY', 'WAITING_IDEAL', 'WAITING_KLARNA', 'WAITING_PAYPAL', 'WAITING_PAYPAL_EVENT', 'WAITING_PPRO_LONG_WAITING', 'WAITING_SOFORT', 'WAITING_T_PAY', 'WAITING_ALIPAY_PAYSECURE'])
      return false unless transaction_state_validator.valid?(@transaction_state)
      submission_component_validator = EnumAttributeValidator.new('String', ['API', 'BUS', 'CONNECT', 'CORE', 'EPAS', 'MCS', 'RESTAPI', 'SWITCH', 'VT'])
      return false unless submission_component_validator.valid?(@submission_component)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] transaction_state Object to be assigned
    def transaction_state=(transaction_state)
      validator = EnumAttributeValidator.new('String', ['AUTHORIZED', 'CAPTURED', 'COMPLETED_GET', 'DECLINED', 'CHECKED', 'INITIALIZED', 'PENDING_AUTHORIZATION', 'PENDING_AUTOVOID', 'PENDING_CAPTURE', 'PENDING_CREDIT', 'PENDING_GIROPAY_INIT', 'PENDING_IDEAL_INIT', 'PENDING_INIT', 'PENDING_READY', 'PENDING_RETURN', 'PENDING_SETTLEMENT', 'PENDING_SOFORT_INIT', 'PENDING_VOID', 'READY', 'SETTLED', 'VOIDED', 'WAITING', 'WAITING_AUTHENTICATION', 'WAITING_3D_SECURE', 'WAITING_CLICK_AND_BUY', 'WAITING_GIROPAY', 'WAITING_IDEAL', 'WAITING_KLARNA', 'WAITING_PAYPAL', 'WAITING_PAYPAL_EVENT', 'WAITING_PPRO_LONG_WAITING', 'WAITING_SOFORT', 'WAITING_T_PAY', 'WAITING_ALIPAY_PAYSECURE'])
      unless validator.valid?(transaction_state)
        fail ArgumentError, 'invalid value for "transaction_state", must be one of #{validator.allowable_values}.'
      end
      @transaction_state = transaction_state
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] submission_component Object to be assigned
    def submission_component=(submission_component)
      validator = EnumAttributeValidator.new('String', ['API', 'BUS', 'CONNECT', 'CORE', 'EPAS', 'MCS', 'RESTAPI', 'SWITCH', 'VT'])
      unless validator.valid?(submission_component)
        fail ArgumentError, 'invalid value for "submission_component", must be one of #{validator.allowable_values}.'
      end
      @submission_component = submission_component
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          transaction_state == o.transaction_state &&
          ipg_transaction_id == o.ipg_transaction_id &&
          order_id == o.order_id &&
          transaction_type == o.transaction_type &&
          payment_method == o.payment_method &&
          amount == o.amount &&
          submission_component == o.submission_component &&
          payer_security_level == o.payer_security_level &&
          transaction_time == o.transaction_time &&
          store_id == o.store_id &&
          user_id == o.user_id &&
          processor == o.processor
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [transaction_state, ipg_transaction_id, order_id, transaction_type, payment_method, amount, submission_component, payer_security_level, transaction_time, store_id, user_id, processor].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = OpenapiClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
