=begin
#Payment Gateway API Specification

#Payment Gateway API for payment processing. 

OpenAPI spec version: 0.0.1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: unset

=end

require "uri"

module SwaggerClient
  class PaymentApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Use this to capture/complete a transaction. Partial postauths are allowed.
    # This can be used for postauth and partial postauths.
    # @param content_type content type
    # @param client_request_id A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.
    # @param api_key 
    # @param timestamp Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).
    # @param message_signature Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256  algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal.
    # @param transaction_id Gateway transaction identifier as returned in the parameter ipgTransactionId
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :store_id an optional outlet id for clients that support multiple store in the same developer app
    # @return [TransactionResponse]
    def perform_payment_post_authorisation(content_type, client_request_id, api_key, timestamp, message_signature, transaction_id, payload, opts = {})
      data, _status_code, _headers = perform_payment_post_authorisation_with_http_info(content_type, client_request_id, api_key, timestamp, message_signature, transaction_id, payload, opts)
      return data
    end

    # Use this to capture/complete a transaction. Partial postauths are allowed.
    # This can be used for postauth and partial postauths.
    # @param content_type content type
    # @param client_request_id A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.
    # @param api_key 
    # @param timestamp Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).
    # @param message_signature Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256  algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal.
    # @param transaction_id Gateway transaction identifier as returned in the parameter ipgTransactionId
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :store_id an optional outlet id for clients that support multiple store in the same developer app
    # @return [Array<(TransactionResponse, Fixnum, Hash)>] TransactionResponse data, response status code and response headers
    def perform_payment_post_authorisation_with_http_info(content_type, client_request_id, api_key, timestamp, message_signature, transaction_id, payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PaymentApi.perform_payment_post_authorisation ..."
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling PaymentApi.perform_payment_post_authorisation"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['application/json'].include?(content_type)
        fail ArgumentError, "invalid value for 'content_type', must be one of application/json"
      end
      # verify the required parameter 'client_request_id' is set
      if @api_client.config.client_side_validation && client_request_id.nil?
        fail ArgumentError, "Missing the required parameter 'client_request_id' when calling PaymentApi.perform_payment_post_authorisation"
      end
      # verify the required parameter 'api_key' is set
      if @api_client.config.client_side_validation && api_key.nil?
        fail ArgumentError, "Missing the required parameter 'api_key' when calling PaymentApi.perform_payment_post_authorisation"
      end
      # verify the required parameter 'timestamp' is set
      if @api_client.config.client_side_validation && timestamp.nil?
        fail ArgumentError, "Missing the required parameter 'timestamp' when calling PaymentApi.perform_payment_post_authorisation"
      end
      # verify the required parameter 'message_signature' is set
      if @api_client.config.client_side_validation && message_signature.nil?
        fail ArgumentError, "Missing the required parameter 'message_signature' when calling PaymentApi.perform_payment_post_authorisation"
      end
      # verify the required parameter 'transaction_id' is set
      if @api_client.config.client_side_validation && transaction_id.nil?
        fail ArgumentError, "Missing the required parameter 'transaction_id' when calling PaymentApi.perform_payment_post_authorisation"
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling PaymentApi.perform_payment_post_authorisation"
      end
      # resource path
      local_var_path = "/v1/payments/{transaction-id}/postauth".sub('{' + 'transaction-id' + '}', transaction_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'storeId'] = opts[:'store_id'] if !opts[:'store_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      # header_params[:'Content-Type'] = content_type
      header_params[:'Client-Request-Id'] = client_request_id
      header_params[:'Api-Key'] = api_key
      header_params[:'Timestamp'] = timestamp
      header_params[:'Message-Signature'] = message_signature

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payload)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TransactionResponse',
        :error_type => 'TransactionErrorResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PaymentApi#perform_payment_post_authorisation\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Generate a primary transaction
    # Use this to originate a financial transaction, like a sale, preauthorization, or credit.
    # @param content_type content type
    # @param client_request_id A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.
    # @param api_key 
    # @param timestamp Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).
    # @param message_signature Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256  algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal.
    # @param payload Primary Transaction request
    # @param [Hash] opts the optional parameters
    # @return [TransactionResponse]
    def primary_payment_transaction(content_type, client_request_id, api_key, timestamp, message_signature, payload, opts = {})
      data, _status_code, _headers = primary_payment_transaction_with_http_info(content_type, client_request_id, api_key, timestamp, message_signature, payload, opts)
      return data
    end

    # Generate a primary transaction
    # Use this to originate a financial transaction, like a sale, preauthorization, or credit.
    # @param content_type content type
    # @param client_request_id A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.
    # @param api_key 
    # @param timestamp Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).
    # @param message_signature Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256  algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal.
    # @param payload Primary Transaction request
    # @param [Hash] opts the optional parameters
    # @return [Array<(TransactionResponse, Fixnum, Hash)>] TransactionResponse data, response status code and response headers
    def primary_payment_transaction_with_http_info(content_type, client_request_id, api_key, timestamp, message_signature, payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PaymentApi.primary_payment_transaction ..."
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling PaymentApi.primary_payment_transaction"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['application/json'].include?(content_type)
        fail ArgumentError, "invalid value for 'content_type', must be one of application/json"
      end
      # verify the required parameter 'client_request_id' is set
      if @api_client.config.client_side_validation && client_request_id.nil?
        fail ArgumentError, "Missing the required parameter 'client_request_id' when calling PaymentApi.primary_payment_transaction"
      end
      # verify the required parameter 'api_key' is set
      if @api_client.config.client_side_validation && api_key.nil?
        fail ArgumentError, "Missing the required parameter 'api_key' when calling PaymentApi.primary_payment_transaction"
      end
      # verify the required parameter 'timestamp' is set
      if @api_client.config.client_side_validation && timestamp.nil?
        fail ArgumentError, "Missing the required parameter 'timestamp' when calling PaymentApi.primary_payment_transaction"
      end
      # verify the required parameter 'message_signature' is set
      if @api_client.config.client_side_validation && message_signature.nil?
        fail ArgumentError, "Missing the required parameter 'message_signature' when calling PaymentApi.primary_payment_transaction"
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling PaymentApi.primary_payment_transaction"
      end
      # resource path
      local_var_path = "/v1/payments"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      # header_params[:'Content-Type'] = content_type
      header_params[:'Client-Request-Id'] = client_request_id
      header_params[:'Api-Key'] = api_key
      header_params[:'Timestamp'] = timestamp
      header_params[:'Message-Signature'] = message_signature

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payload)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TransactionResponse',
        :error_type => 'TransactionErrorResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PaymentApi#primary_payment_transaction\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Return/refund a transaction.
    # Use this to return/refund an existing transaction.  Partial returns are allowed.
    # @param content_type content type
    # @param client_request_id A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.
    # @param api_key 
    # @param timestamp Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).
    # @param message_signature Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256  algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal.
    # @param transaction_id Gateway transaction identifier as returned in the parameter ipgTransactionId
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :store_id an optional outlet id for clients that support multiple store in the same developer app
    # @return [TransactionResponse]
    def return_transaction(content_type, client_request_id, api_key, timestamp, message_signature, transaction_id, payload, opts = {})
      data, _status_code, _headers = return_transaction_with_http_info(content_type, client_request_id, api_key, timestamp, message_signature, transaction_id, payload, opts)
      return data
    end

    # Return/refund a transaction.
    # Use this to return/refund an existing transaction.  Partial returns are allowed.
    # @param content_type content type
    # @param client_request_id A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.
    # @param api_key 
    # @param timestamp Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).
    # @param message_signature Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256  algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal.
    # @param transaction_id Gateway transaction identifier as returned in the parameter ipgTransactionId
    # @param payload 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :store_id an optional outlet id for clients that support multiple store in the same developer app
    # @return [Array<(TransactionResponse, Fixnum, Hash)>] TransactionResponse data, response status code and response headers
    def return_transaction_with_http_info(content_type, client_request_id, api_key, timestamp, message_signature, transaction_id, payload, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PaymentApi.return_transaction ..."
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling PaymentApi.return_transaction"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['application/json'].include?(content_type)
        fail ArgumentError, "invalid value for 'content_type', must be one of application/json"
      end
      # verify the required parameter 'client_request_id' is set
      if @api_client.config.client_side_validation && client_request_id.nil?
        fail ArgumentError, "Missing the required parameter 'client_request_id' when calling PaymentApi.return_transaction"
      end
      # verify the required parameter 'api_key' is set
      if @api_client.config.client_side_validation && api_key.nil?
        fail ArgumentError, "Missing the required parameter 'api_key' when calling PaymentApi.return_transaction"
      end
      # verify the required parameter 'timestamp' is set
      if @api_client.config.client_side_validation && timestamp.nil?
        fail ArgumentError, "Missing the required parameter 'timestamp' when calling PaymentApi.return_transaction"
      end
      # verify the required parameter 'message_signature' is set
      if @api_client.config.client_side_validation && message_signature.nil?
        fail ArgumentError, "Missing the required parameter 'message_signature' when calling PaymentApi.return_transaction"
      end
      # verify the required parameter 'transaction_id' is set
      if @api_client.config.client_side_validation && transaction_id.nil?
        fail ArgumentError, "Missing the required parameter 'transaction_id' when calling PaymentApi.return_transaction"
      end
      # verify the required parameter 'payload' is set
      if @api_client.config.client_side_validation && payload.nil?
        fail ArgumentError, "Missing the required parameter 'payload' when calling PaymentApi.return_transaction"
      end
      # resource path
      local_var_path = "/v1/payments/{transaction-id}/return".sub('{' + 'transaction-id' + '}', transaction_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'storeId'] = opts[:'store_id'] if !opts[:'store_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      # header_params[:'Content-Type'] = content_type
      header_params[:'Client-Request-Id'] = client_request_id
      header_params[:'Api-Key'] = api_key
      header_params[:'Timestamp'] = timestamp
      header_params[:'Message-Signature'] = message_signature

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(payload)
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TransactionResponse',
        :error_type => 'TransactionErrorResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PaymentApi#return_transaction\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieve the state of a transaction
    # Use this query to get the current state of an existing transaction.
    # @param content_type content type
    # @param client_request_id A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.
    # @param api_key 
    # @param timestamp Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).
    # @param message_signature Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256  algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal.
    # @param transaction_id Gateway transaction identifier as returned in the parameter ipgTransactionId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :store_id an optional outlet id for clients that support multiple store in the same developer app
    # @return [TransactionResponse]
    def transaction_inquiry(content_type, client_request_id, api_key, timestamp, message_signature, transaction_id, opts = {})
      data, _status_code, _headers = transaction_inquiry_with_http_info(content_type, client_request_id, api_key, timestamp, message_signature, transaction_id, opts)
      return data
    end

    # Retrieve the state of a transaction
    # Use this query to get the current state of an existing transaction.
    # @param content_type content type
    # @param client_request_id A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.
    # @param api_key 
    # @param timestamp Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).
    # @param message_signature Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256  algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal.
    # @param transaction_id Gateway transaction identifier as returned in the parameter ipgTransactionId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :store_id an optional outlet id for clients that support multiple store in the same developer app
    # @return [Array<(TransactionResponse, Fixnum, Hash)>] TransactionResponse data, response status code and response headers
    def transaction_inquiry_with_http_info(content_type, client_request_id, api_key, timestamp, message_signature, transaction_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PaymentApi.transaction_inquiry ..."
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling PaymentApi.transaction_inquiry"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['application/json'].include?(content_type)
        fail ArgumentError, "invalid value for 'content_type', must be one of application/json"
      end
      # verify the required parameter 'client_request_id' is set
      if @api_client.config.client_side_validation && client_request_id.nil?
        fail ArgumentError, "Missing the required parameter 'client_request_id' when calling PaymentApi.transaction_inquiry"
      end
      # verify the required parameter 'api_key' is set
      if @api_client.config.client_side_validation && api_key.nil?
        fail ArgumentError, "Missing the required parameter 'api_key' when calling PaymentApi.transaction_inquiry"
      end
      # verify the required parameter 'timestamp' is set
      if @api_client.config.client_side_validation && timestamp.nil?
        fail ArgumentError, "Missing the required parameter 'timestamp' when calling PaymentApi.transaction_inquiry"
      end
      # verify the required parameter 'message_signature' is set
      if @api_client.config.client_side_validation && message_signature.nil?
        fail ArgumentError, "Missing the required parameter 'message_signature' when calling PaymentApi.transaction_inquiry"
      end
      # verify the required parameter 'transaction_id' is set
      if @api_client.config.client_side_validation && transaction_id.nil?
        fail ArgumentError, "Missing the required parameter 'transaction_id' when calling PaymentApi.transaction_inquiry"
      end
      # resource path
      local_var_path = "/v1/payments/{transaction-id}".sub('{' + 'transaction-id' + '}', transaction_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'storeId'] = opts[:'store_id'] if !opts[:'store_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      # header_params[:'Content-Type'] = content_type
      header_params[:'Client-Request-Id'] = client_request_id
      header_params[:'Api-Key'] = api_key
      header_params[:'Timestamp'] = timestamp
      header_params[:'Message-Signature'] = message_signature

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TransactionResponse',
        :error_type => 'TransactionErrorResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PaymentApi#transaction_inquiry\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Reverse a previous action on an existing transaction
    # Use this to reverse a postauth/completion, credit, preauth, or sale.
    # @param content_type content type
    # @param client_request_id A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.
    # @param api_key 
    # @param timestamp Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).
    # @param message_signature Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256  algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal.
    # @param transaction_id Gateway transaction identifier as returned in the parameter ipgTransactionId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :store_id an optional outlet id for clients that support multiple store in the same developer app
    # @return [TransactionResponse]
    def void_transaction(content_type, client_request_id, api_key, timestamp, message_signature, transaction_id, opts = {})
      data, _status_code, _headers = void_transaction_with_http_info(content_type, client_request_id, api_key, timestamp, message_signature, transaction_id, opts)
      return data
    end

    # Reverse a previous action on an existing transaction
    # Use this to reverse a postauth/completion, credit, preauth, or sale.
    # @param content_type content type
    # @param client_request_id A client-generated ID for request tracking and signature creation, unique per request.  This is also used for idempotency control. We recommend 128-bit UUID format.
    # @param api_key 
    # @param timestamp Epoch timestamp in milliseconds in the request from a client system. Used for Message Signature generation and time limit (5 mins).
    # @param message_signature Used to ensure the request has not been tampered with during transmission. The Message-Signature is the Base64 encoded HMAC hash (SHA256  algorithm with the API Secret as the key.) For more information, refer to the supporting documentation on the Developer Portal.
    # @param transaction_id Gateway transaction identifier as returned in the parameter ipgTransactionId
    # @param [Hash] opts the optional parameters
    # @option opts [String] :store_id an optional outlet id for clients that support multiple store in the same developer app
    # @return [Array<(TransactionResponse, Fixnum, Hash)>] TransactionResponse data, response status code and response headers
    def void_transaction_with_http_info(content_type, client_request_id, api_key, timestamp, message_signature, transaction_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: PaymentApi.void_transaction ..."
      end
      # verify the required parameter 'content_type' is set
      if @api_client.config.client_side_validation && content_type.nil?
        fail ArgumentError, "Missing the required parameter 'content_type' when calling PaymentApi.void_transaction"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['application/json'].include?(content_type)
        fail ArgumentError, "invalid value for 'content_type', must be one of application/json"
      end
      # verify the required parameter 'client_request_id' is set
      if @api_client.config.client_side_validation && client_request_id.nil?
        fail ArgumentError, "Missing the required parameter 'client_request_id' when calling PaymentApi.void_transaction"
      end
      # verify the required parameter 'api_key' is set
      if @api_client.config.client_side_validation && api_key.nil?
        fail ArgumentError, "Missing the required parameter 'api_key' when calling PaymentApi.void_transaction"
      end
      # verify the required parameter 'timestamp' is set
      if @api_client.config.client_side_validation && timestamp.nil?
        fail ArgumentError, "Missing the required parameter 'timestamp' when calling PaymentApi.void_transaction"
      end
      # verify the required parameter 'message_signature' is set
      if @api_client.config.client_side_validation && message_signature.nil?
        fail ArgumentError, "Missing the required parameter 'message_signature' when calling PaymentApi.void_transaction"
      end
      # verify the required parameter 'transaction_id' is set
      if @api_client.config.client_side_validation && transaction_id.nil?
        fail ArgumentError, "Missing the required parameter 'transaction_id' when calling PaymentApi.void_transaction"
      end
      # resource path
      local_var_path = "/v1/payments/{transaction-id}/void".sub('{' + 'transaction-id' + '}', transaction_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'storeId'] = opts[:'store_id'] if !opts[:'store_id'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      # header_params[:'Content-Type'] = content_type
      header_params[:'Client-Request-Id'] = client_request_id
      header_params[:'Api-Key'] = api_key
      header_params[:'Timestamp'] = timestamp
      header_params[:'Message-Signature'] = message_signature

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TransactionResponse',
        :error_type => 'TransactionErrorResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PaymentApi#void_transaction\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
