=begin
#Payment Gateway API Specification

#Payment Gateway API for payment processing. 

OpenAPI spec version: 0.0.1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: unset

=end

require 'date'

module SwaggerClient

  class TransactionErrorResponse
    # The schema type returned in the response.
    attr_accessor :response_type

    # Echoes back the value in the Request header
    attr_accessor :client_request_id

    # Echoes back the value in the Request header
    attr_accessor :api_trace_id

    # The Response Transaction ID
    attr_accessor :ipg_transaction_id

    # Client Order ID if supplied by client, otherwise the Order ID
    attr_accessor :order_id

    attr_accessor :transaction_type

    # The processor approval code for compliance.
    attr_accessor :authorization_code

    # The processor address validation response for compliance.
    attr_accessor :avs_response

    # The processor card verification validation response for compliance.
    attr_accessor :security_code_response

    # Card brand of the payment instrument
    attr_accessor :brand

    # Country of the card issuer
    attr_accessor :country

    # The terminal that is processing the transaction
    attr_accessor :terminal_id

    # The unique client Transaction ID from the Request header, if supplied
    attr_accessor :client_transaction_id

    # The transaction time in seconds since Epoch
    attr_accessor :transaction_time

    attr_accessor :approved_amount

    # The status of the transaction. APPROVED/WAITING are returned by the endpoints.  VALIDATION_FAILED/DECLINED are errors. See ErrorResponse object for details.
    attr_accessor :transaction_status

    # The state of the transaction.
    attr_accessor :transaction_state

    attr_accessor :authentication_redirect

    # The transaction id received from schemes for the initial transaction, returned for the transactions marked as \"FIRST\"
    attr_accessor :scheme_transaction_id

    attr_accessor :processor

    attr_accessor :error

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'response_type' => :'responseType',
        :'client_request_id' => :'clientRequestId',
        :'api_trace_id' => :'apiTraceId',
        :'ipg_transaction_id' => :'ipgTransactionId',
        :'order_id' => :'orderId',
        :'transaction_type' => :'transactionType',
        :'authorization_code' => :'authorizationCode',
        :'avs_response' => :'avsResponse',
        :'security_code_response' => :'securityCodeResponse',
        :'brand' => :'brand',
        :'country' => :'country',
        :'terminal_id' => :'terminalId',
        :'client_transaction_id' => :'clientTransactionId',
        :'transaction_time' => :'transactionTime',
        :'approved_amount' => :'approvedAmount',
        :'transaction_status' => :'transactionStatus',
        :'transaction_state' => :'transactionState',
        :'authentication_redirect' => :'authenticationRedirect',
        :'scheme_transaction_id' => :'schemeTransactionId',
        :'processor' => :'processor',
        :'error' => :'error'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'response_type' => :'ResponseType',
        :'client_request_id' => :'String',
        :'api_trace_id' => :'String',
        :'ipg_transaction_id' => :'String',
        :'order_id' => :'String',
        :'transaction_type' => :'TransactionType',
        :'authorization_code' => :'String',
        :'avs_response' => :'String',
        :'security_code_response' => :'String',
        :'brand' => :'String',
        :'country' => :'String',
        :'terminal_id' => :'String',
        :'client_transaction_id' => :'String',
        :'transaction_time' => :'Integer',
        :'approved_amount' => :'Amount',
        :'transaction_status' => :'String',
        :'transaction_state' => :'String',
        :'authentication_redirect' => :'TransactionResponseAuthenticationRedirect',
        :'scheme_transaction_id' => :'String',
        :'processor' => :'ProcessorData',
        :'error' => :'Error'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      if attributes.has_key?(:'responseType')
        self.response_type = attributes[:'responseType']
      end

      if attributes.has_key?(:'clientRequestId')
        self.client_request_id = attributes[:'clientRequestId']
      end

      if attributes.has_key?(:'apiTraceId')
        self.api_trace_id = attributes[:'apiTraceId']
      end

      if attributes.has_key?(:'ipgTransactionId')
        self.ipg_transaction_id = attributes[:'ipgTransactionId']
      end

      if attributes.has_key?(:'orderId')
        self.order_id = attributes[:'orderId']
      end

      if attributes.has_key?(:'transactionType')
        self.transaction_type = attributes[:'transactionType']
      end

      if attributes.has_key?(:'authorizationCode')
        self.authorization_code = attributes[:'authorizationCode']
      end

      if attributes.has_key?(:'avsResponse')
        self.avs_response = attributes[:'avsResponse']
      end

      if attributes.has_key?(:'securityCodeResponse')
        self.security_code_response = attributes[:'securityCodeResponse']
      end

      if attributes.has_key?(:'brand')
        self.brand = attributes[:'brand']
      end

      if attributes.has_key?(:'country')
        self.country = attributes[:'country']
      end

      if attributes.has_key?(:'terminalId')
        self.terminal_id = attributes[:'terminalId']
      end

      if attributes.has_key?(:'clientTransactionId')
        self.client_transaction_id = attributes[:'clientTransactionId']
      end

      if attributes.has_key?(:'transactionTime')
        self.transaction_time = attributes[:'transactionTime']
      end

      if attributes.has_key?(:'approvedAmount')
        self.approved_amount = attributes[:'approvedAmount']
      end

      if attributes.has_key?(:'transactionStatus')
        self.transaction_status = attributes[:'transactionStatus']
      end

      if attributes.has_key?(:'transactionState')
        self.transaction_state = attributes[:'transactionState']
      end

      if attributes.has_key?(:'authenticationRedirect')
        self.authentication_redirect = attributes[:'authenticationRedirect']
      end

      if attributes.has_key?(:'schemeTransactionId')
        self.scheme_transaction_id = attributes[:'schemeTransactionId']
      end

      if attributes.has_key?(:'processor')
        self.processor = attributes[:'processor']
      end

      if attributes.has_key?(:'error')
        self.error = attributes[:'error']
      end

    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if !@scheme_transaction_id.nil? && @scheme_transaction_id.to_s.length > 40
        invalid_properties.push("invalid value for 'scheme_transaction_id', the character length must be smaller than or equal to 40.")
      end

      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      transaction_status_validator = EnumAttributeValidator.new('String', ["APPROVED", "WAITING", "VALIDATION_FAILED", "DECLINED"])
      return false unless transaction_status_validator.valid?(@transaction_status)
      transaction_state_validator = EnumAttributeValidator.new('String', ["AUTHORIZED", "CAPTURED", "COMPLETED_GET", "DECLINED", "CHECKED", "INITIALIZED", "PENDING_AUTHORIZATION", "PENDING_AUTOVOID", "PENDING_CAPTURE", "PENDING_CREDIT", "PENDING_GIROPAY_INIT", "PENDING_IDEAL_INIT", "PENDING_INIT", "PENDING_READY", "PENDING_RETURN", "PENDING_SETTLEMENT", "PENDING_SOFORT_INIT", "PENDING_VOID", "READY", "SETTLED", "VOIDED", "WAITING", "WAITING_AUTHENTICATION", "WAITING_3D_SECURE", "WAITING_CLICK_AND_BUY", "WAITING_GIROPAY", "WAITING_IDEAL", "WAITING_KLARNA", "WAITING_PAYPAL", "WAITING_PAYPAL_EVENT", "WAITING_PPRO_LONG_WAITING", "WAITING_SOFORT", "WAITING_T_PAY", "WAITING_ALIPAY_PAYSECURE"])
      return false unless transaction_state_validator.valid?(@transaction_state)
      return false if !@scheme_transaction_id.nil? && @scheme_transaction_id.to_s.length > 40
      return true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] transaction_status Object to be assigned
    def transaction_status=(transaction_status)
      validator = EnumAttributeValidator.new('String', ["APPROVED", "WAITING", "VALIDATION_FAILED", "DECLINED"])
      unless validator.valid?(transaction_status)
        fail ArgumentError, "invalid value for 'transaction_status', must be one of #{validator.allowable_values}."
      end
      @transaction_status = transaction_status
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] transaction_state Object to be assigned
    def transaction_state=(transaction_state)
      validator = EnumAttributeValidator.new('String', ["AUTHORIZED", "CAPTURED", "COMPLETED_GET", "DECLINED", "CHECKED", "INITIALIZED", "PENDING_AUTHORIZATION", "PENDING_AUTOVOID", "PENDING_CAPTURE", "PENDING_CREDIT", "PENDING_GIROPAY_INIT", "PENDING_IDEAL_INIT", "PENDING_INIT", "PENDING_READY", "PENDING_RETURN", "PENDING_SETTLEMENT", "PENDING_SOFORT_INIT", "PENDING_VOID", "READY", "SETTLED", "VOIDED", "WAITING", "WAITING_AUTHENTICATION", "WAITING_3D_SECURE", "WAITING_CLICK_AND_BUY", "WAITING_GIROPAY", "WAITING_IDEAL", "WAITING_KLARNA", "WAITING_PAYPAL", "WAITING_PAYPAL_EVENT", "WAITING_PPRO_LONG_WAITING", "WAITING_SOFORT", "WAITING_T_PAY", "WAITING_ALIPAY_PAYSECURE"])
      unless validator.valid?(transaction_state)
        fail ArgumentError, "invalid value for 'transaction_state', must be one of #{validator.allowable_values}."
      end
      @transaction_state = transaction_state
    end

    # Custom attribute writer method with validation
    # @param [Object] scheme_transaction_id Value to be assigned
    def scheme_transaction_id=(scheme_transaction_id)

      if !scheme_transaction_id.nil? && scheme_transaction_id.to_s.length > 40
        fail ArgumentError, "invalid value for 'scheme_transaction_id', the character length must be smaller than or equal to 40."
      end

      @scheme_transaction_id = scheme_transaction_id
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          response_type == o.response_type &&
          client_request_id == o.client_request_id &&
          api_trace_id == o.api_trace_id &&
          ipg_transaction_id == o.ipg_transaction_id &&
          order_id == o.order_id &&
          transaction_type == o.transaction_type &&
          authorization_code == o.authorization_code &&
          avs_response == o.avs_response &&
          security_code_response == o.security_code_response &&
          brand == o.brand &&
          country == o.country &&
          terminal_id == o.terminal_id &&
          client_transaction_id == o.client_transaction_id &&
          transaction_time == o.transaction_time &&
          approved_amount == o.approved_amount &&
          transaction_status == o.transaction_status &&
          transaction_state == o.transaction_state &&
          authentication_redirect == o.authentication_redirect &&
          scheme_transaction_id == o.scheme_transaction_id &&
          processor == o.processor &&
          error == o.error
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [response_type, client_request_id, api_trace_id, ipg_transaction_id, order_id, transaction_type, authorization_code, avs_response, security_code_response, brand, country, terminal_id, client_transaction_id, transaction_time, approved_amount, transaction_status, transaction_state, authentication_redirect, scheme_transaction_id, processor, error].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = SwaggerClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
